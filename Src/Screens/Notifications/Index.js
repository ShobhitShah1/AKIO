
import { Alert, StyleSheet, Text, TouchableOpacity, View, FlatList } from 'react-native'
import React from 'react'
import PushNotification from 'react-native-push-notification';
import { COLORS } from '../../Common/Global';
import { useNavigation } from '@react-navigation/native';
import Sound from 'react-native-sound';

const Index = () => {

    const navigation = useNavigation()
    const [currentSoundIndex, setCurrentSoundIndex] = React.useState(0);
    const [sounds, setSounds] = React.useState([]);

    PushNotification.configure({
        // (optional) Called when Token is generated (iOS and Android)
        onRegister: function (token) {
            console.log("TOKEN:", token);
        },

        // (required) Called when a remote is received or opened, or local notification is opened
        onNotification: function (notification) {
            console.log("NOTIFICATION:", notification);
            notification.finish(navigation.navigate('Auth', { screen: 'SignUp' }));

            if (notification.channelId === 'promotions') {
                Alert.alert('promotions')
            } else if (notification.channelId === 'news') {
                Alert.alert('news')
            } else if (notification.channelId === 'AKIOMAIN') {
                Alert.alert('AKIOMAIN')
            }
        },

        // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)
        onAction: function (notification) {
            console.log("ACTION:", notification.action);
            console.log("NOTIFICATION:", notification);

            // process the action
        },

        // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)
        onRegistrationError: function (err) {
            console.error(err.message, err);
        },

        // IOS ONLY (optional): default: all - Permissions to register.
        permissions: {
            alert: true,
            badge: true,
            sound: true,
        },

        // Should the initial notification be popped automatically
        // default: true
        popInitialNotification: true,

        /**
         * (optional) default: true
         * - Specified if permissions (ios) and token (android and ios) will requested or not,
         * - if not, you must call PushNotificationsHandler.requestPermissions() later
         * - if you are not using remote notification or do not have Firebase installed, use this:
         *     requestPermissions: Platform.OS === 'ios'
         */
        requestPermissions: true,
    });
    function notificationaction() {
        Alert.alert("jjjajjsa")
    }

    function notification() {
        PushNotification.localNotification({

            channelId: "AKIOMAIN",
            autoCancel: true,
            vibrate: true,
            vibration: 10000,
            invokeApp: true,
            id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            title: "My Notification Title", // (optional)
            message: "My Notification Message", // (required)
            userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
            playSound: true, // (optional) default: true
        });
    }

    function snotification() {
        PushNotification.localNotificationSchedule({
            channelId: "AKIOMAIN",
            message: "My Notification Message", // (required)
            date: new Date(Date.now() + 60 * 500), // in 60 secs
            allowWhileIdle: false, // (opti
        });

    }

    function newsc() {
        PushNotification.localNotification({
            channelId: "news",
            autoCancel: true,
            vibrate: true,
            vibration: 10000,
            invokeApp: true,
            id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            title: "My Notification Title", // (optional)
            message: "My Notification Message", // (required)
            userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
            playSound: true, // (optional) default: true
        });
    }

    function promotions() {
        PushNotification.localNotification({

            channelId: "promotions",
            autoCancel: true,
            vibrate: true,
            vibration: 10000,
            invokeApp: true,
            id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            title: "My Notification Title", // (optional)
            message: "My Notification Message", // (required)
            userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
            playSound: true, // (optional) default: true
        });
    }

    React.useEffect(() => {
        PushNotification.getChannels((e) => console.log(e))
    }, [])


    React.useEffect(() => {
        setSounds([
            new Sound('../../../Assets/Sound/sound1.mp3', Sound.MAIN_BUNDLE),
            new Sound('../../../Assets/Sound/sound2.mp3', Sound.MAIN_BUNDLE),
            new Sound('../../../Assets/Sound/sound3.mp3', Sound.MAIN_BUNDLE),
        ]);
    }, []);

    const playSound = (index) => {
        sounds[index].play(() => {
            setCurrentSoundIndex(index + 1);
        });
    }

    const renderItem = ({ item, index }) => {
        console.log(item, index);
        return (
            <TouchableOpacity style={{  justifyContent: 'center', alignSelf: 'center', margin: 20 }} onPress={() => playSound(index)}>
                <Text style={{ color: COLORS.black, fontWeight: 'bold', fontSize: 50  }}>{item._filename}</Text>
            </TouchableOpacity>
        )
    }

    return (
        <View style={{ justifyContent: 'center', alignSelf: 'center', flex: 1 }}>
            <TouchableOpacity onPress={() => snotification()}><Text style={{ fontSize: 20, color: COLORS.black }}>Schedule</Text></TouchableOpacity>
            <TouchableOpacity onPress={() => notification()}><Text style={{ fontSize: 20, color: COLORS.black }}>Akio</Text></TouchableOpacity>
            <TouchableOpacity onPress={() => newsc()}><Text style={{ fontSize: 20, color: COLORS.black }}>News</Text></TouchableOpacity>
            <TouchableOpacity onPress={() => promotions()}><Text style={{ fontSize: 20, color: COLORS.black }}>Promotions</Text></TouchableOpacity>
            <FlatList
                data={sounds}
                renderItem={renderItem}
                keyExtractor={(item, index) => index.toString()}
            />
        </View>
    )
}

export default Index

const styles = StyleSheet.create({})



// import React, { useEffect, useState } from 'react';
// import { View, StyleSheet, TouchableOpacity } from 'react-native';
// import Ionicons from 'react-native-vector-icons/Ionicons';

// var Sound = require('react-native-sound');


// Sound.setCategory('Playback');

// var audio = new Sound(
//     'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3',
//     null,
//     error => {
//         if (error) {
//             console.log('failed to load the sound', error);
//             return;
//         }
//         // if loaded successfully
//         console.log(
//             'duration in seconds: ' +
//             audio.getDuration() +
//             'number of channels: ' +
//             audio.getNumberOfChannels(),
//         );
//     },
// );
// const App = () => {
//     const [playing, setPlaying] = useState();
//     useEffect(() => {
//         audio.setVolume(1);
//         return () => {
//             audio.release();
//         };
//     }, []);
//     const playPause = () => {
//         try {
//             if (audio.isPlaying()) {
//                 audio.pause();
//                 setPlaying(false);
//             } else {
//                 setPlaying(true);
//                 audio.play(success => {
//                     if (success) {
//                         setPlaying(false);
//                         console.log('successfully finished playing');
//                     } else {
//                         setPlaying(false);
//                         console.log('playback failed due to audio decoding errors');
//                     }
//                 });
//             }
//         } catch (error) {
//             console.log(error);
//         }
//     };
//     return (
//         <View style={styles.container}>
//             <TouchableOpacity style={styles.playBtn} onPress={playPause}>
//                 <Ionicons
//                     name={playing ? 'ios-pause-outline' : 'ios-play-outline'}
//                     size={36}
//                     color={'#fff'}
//                 />
//             </TouchableOpacity>
//         </View>
//     );
// };
// const styles = StyleSheet.create({
//     container: {
//         flex: 1,
//         alignItems: 'center',
//         justifyContent: 'center',
//         backgroundColor: '#000',
//     },
//     playBtn: {
//         padding: 20,
//     },
// });
// export default App;


 

// // import { useState } from 'react';
// // import { View, Text, TouchableOpacity } from 'react-native';
// // import Sound from 'react-native-sound';

// // const MyComponent = () => {
// //   const [playbackStatus, setPlaybackStatus] = useState('paused');
// //   const [sound, setSound] = useState(null);

// //   useEffect(() => {
// //     setSound(new Sound('https://my-api.com/sounds/1.mp3', Sound.MAIN_BUNDLE));
// //   }, []);

// //   const togglePlayback = () => {
// //     if (playbackStatus === 'paused') {
// //       sound.play();
// //       setPlaybackStatus('playing');
// //     } else {
// //       sound.pause();
// //       setPlaybackStatus('paused');
// //     }
// //   };

// //   return (
// //     <View>
// //       <TouchableOpacity onPress={togglePlayback}>
// //         <Text>{playbackStatus === 'paused' ? 'Play' : 'Pause'}</Text>
// //       </TouchableOpacity>
// //     </View>
// //   );
// // }

// // export default MyComponent;
