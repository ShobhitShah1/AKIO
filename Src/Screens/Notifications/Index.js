import { Alert, StyleSheet, Text, TouchableOpacity, View } from 'react-native'
import React from 'react'
import PushNotification from 'react-native-push-notification';
import { COLORS } from '../../Common/Global';
import { useNavigation } from '@react-navigation/native';

const Index = () => {

    const navigation = useNavigation()


    PushNotification.configure({
        // (optional) Called when Token is generated (iOS and Android)
        onRegister: function (token) {
            console.log("TOKEN:", token);
        },

        // (required) Called when a remote is received or opened, or local notification is opened
        onNotification: function (notification) {
            console.log("NOTIFICATION:", notification);
            notification.finish(navigation.navigate('Auth', { screen: 'SignUp' }));

            if (notification.channelId === 'promotions') {
                Alert.alert('promotions')
            } else if (notification.channelId === 'news') {
                Alert.alert('news')
            } else if (notification.channelId === 'AKIOMAIN') {
                Alert.alert('AKIOMAIN')
            }
        },

        // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)
        onAction: function (notification) {
            console.log("ACTION:", notification.action);
            console.log("NOTIFICATION:", notification);

            // process the action
        },

        // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)
        onRegistrationError: function (err) {
            console.error(err.message, err);
        },

        // IOS ONLY (optional): default: all - Permissions to register.
        permissions: {
            alert: true,
            badge: true,
            sound: true,
        },

        // Should the initial notification be popped automatically
        // default: true
        popInitialNotification: true,

        /**
         * (optional) default: true
         * - Specified if permissions (ios) and token (android and ios) will requested or not,
         * - if not, you must call PushNotificationsHandler.requestPermissions() later
         * - if you are not using remote notification or do not have Firebase installed, use this:
         *     requestPermissions: Platform.OS === 'ios'
         */
        requestPermissions: true,
    });
    function notificationaction() {
        Alert.alert("jjjajjsa")
    }

    function notification() {
        PushNotification.localNotification({

            channelId: "AKIOMAIN",
            autoCancel: true,
            vibrate: true,
            vibration: 10000,
            invokeApp: true,
            id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            title: "My Notification Title", // (optional)
            message: "My Notification Message", // (required)
            userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
            playSound: true, // (optional) default: true
        });
    }

    function snotification() {
        PushNotification.localNotificationSchedule({
            channelId: "AKIOMAIN",
            message: "My Notification Message", // (required)
            date: new Date(Date.now() + 60 * 500), // in 60 secs
            allowWhileIdle: false, // (opti
        });

    }

    function newsc() {
        PushNotification.localNotification({

            channelId: "news",
            autoCancel: true,
            vibrate: true,
            vibration: 10000,
            invokeApp: true,
            id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            title: "My Notification Title", // (optional)
            message: "My Notification Message", // (required)
            userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
            playSound: true, // (optional) default: true
        });
    }

    function promotions() {
        PushNotification.localNotification({

            channelId: "promotions",
            autoCancel: true,
            vibrate: true,
            vibration: 10000,
            invokeApp: true,
            id: 0, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            title: "My Notification Title", // (optional)
            message: "My Notification Message", // (required)
            userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
            playSound: true, // (optional) default: true
        });
    }

    React.useEffect(() => {
        PushNotification.getChannels((e) => console.log(e))
    }, [])


    return (
        <View style={{ justifyContent: 'center', alignSelf: 'center', flex: 1 }}>
            <TouchableOpacity onPress={() => snotification()}><Text style={{ fontSize: 20, color: COLORS.black }}>Schedule</Text></TouchableOpacity>
            <TouchableOpacity onPress={() => notification()}><Text style={{ fontSize: 20, color: COLORS.black }}>Akio</Text></TouchableOpacity>
            <TouchableOpacity onPress={() => newsc()}><Text style={{ fontSize: 20, color: COLORS.black }}>News</Text></TouchableOpacity>
            <TouchableOpacity onPress={() => promotions()}><Text style={{ fontSize: 20, color: COLORS.black }}>Promotions</Text></TouchableOpacity>
        </View>
    )
}

export default Index

const styles = StyleSheet.create({})